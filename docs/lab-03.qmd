---
title: "Lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author:
  - name: https://github.com/SarahRoseCulhane
    email: sculhane@colostate.edu
format: html
 theme: Solar
---

**question 1: Public Data**

```{r}
library(tidyverse); library(flextable)
data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
```

Here is how I created an object called my.date set as "2022-02-01" and an object called my.state, set as "Colorado"

```{r}
my.date <- as.Date("2022-02-01")  
my.state <- "Colorado"
```

**Question 2: Daily Summary**

Here, I created a subset limiting the data to Colorado and adding new columns for new cases and new deaths

```{r}
colorado_covid <- data %>%
  filter(state == my.state) %>%
  arrange(county, date) %>%
  group_by(county) %>%
  mutate(
    new_cases = cases - lag(cases, default = 0),  
    new_deaths = deaths - lag(deaths, default = 0)  
  ) %>%
  ungroup()

```

Here is the code I used to generate a data set of the 5 counties with the most cumulative cases.

```{r}
covid_most_cumulative <- colorado_data %>%
  filter(date == my.date) %>%
  arrange(desc(cases)) %>%
  slice_head(n = 5) %>%
  select(county, cases) 
```

Here is the code I used to make a table of the data using the flextable function.

```{r}
covid_most_cumulative_table <- flextable(covid_most_cumulative) %>%
  add_footer_lines("Top 5 counties in Colorado with the most cumulative COVID cases on 2022-02-01") %>%
  set_caption("Table 1: Most cumulative COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all") 

covid_most_cumulative_table
```

Here is the code I used to generate a table showing the top 5 counties with the most new cases

```{r}
covid_new_cases <- colorado_data %>%
  filter(date == my.date) %>%
  select (county, new_cases) %>%
  arrange(desc(new_cases)) %>%
  slice_head(n = 5) 
```

Here is the code I used to generate a table of the data using flextable

```{r}
covid_new_cases_table <- flextable(covid_new_cases) %>%
  add_footer_lines("Top 5 counties in Colorado with the most new cases on 2022-02-01") %>%
  set_caption("Table 2: Most new COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all")
covid_new_cases_table

```

**Question 3: Normalizing Data** I used the code to complete the following tasks:

I used the following code to read the population data
```{r}
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
```

First, I renamed the "fips" column "FIP" in the covid data
```{r}
colorado_covid_temp <- colorado_covid %>%
  rename(FIP = fips)
colorado_covid_temp
```
Then, I loaded the population data
```{r}
population_data = read_csv('https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv')
```

I used the following code to:
-   Converted the STATE numeric into a character forced to 2 digits with a leading 0 (when needed)
-   Converted the COUNTY numeric into a character forced to 3 digits with leading 0â€™s (when needed)
-   Created a FIP variable the STATE numeric into a character forced to 2 digits with a leading 0 (when needed)
```{r}
#Converted STATE numeric and COUNTY numberic into characters
population_data$STATE_FIP <- sprintf("%02s", population_data$STATE)
population_data$COUNTY_FIP <- sprintf("%03s", population_data$COUNTY)

#created a FIP variable
population_data$FIP <- paste0(population_data$STATE_FIP, population_data$COUNTY_FIP)
```

Here is the code I used to select only columns that contain "NAME" or "2021" and remove counties with FIP code "000"

```{r}
population_data_filtered <- population_data %>%
  filter(COUNTY_FIP !="000") %>%
   select(contains("NAME") | contains("2021"))
```

Here is the code I used to find the range of populations in Colorado counties in 2021. The range was between 54 and 9809462 people
```{r}
range(population_data_filtered$POPESTIMATE2021)
```




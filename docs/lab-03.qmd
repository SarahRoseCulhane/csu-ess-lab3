---
title: "Lab 3: COVID-19"
subtitle: 'Ecosystem Science and Sustainability 330'
author:
  - name: https://github.com/SarahRoseCulhane
    email: sculhane@colostate.edu
format: html
---

**question 1: Public Data**

```{r}
library(tidyverse); library(flextable)
data = read_csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
```

Here is how I created an object called my.date set as "2022-02-01" and an object called my.state, set as "Colorado"

```{r}
my.date <- as.Date("2022-02-01")  
my.state <- "Colorado"
```

**Question 2: Daily Summary**

Here, I created a subset limiting the data to Colorado and adding new columns for new cases and new deaths

```{r}
colorado_covid <- data %>%
  filter(state == my.state) %>%
  arrange(county, date) %>%
  group_by(county) %>%
  mutate(
    new_cases = cases - lag(cases, default = 0),  
    new_deaths = deaths - lag(deaths, default = 0)  
  ) %>%
  ungroup()

```

Here is the code I used to generate a data set of the 5 counties with the most cumulative cases.

```{r}
covid_most_cumulative <- colorado_data %>%
  filter(date == my.date) %>%
  arrange(desc(cases)) %>%
  slice_head(n = 5) %>%
  select(county, cases) 
```

Here is the code I used to make a table of the data using the flextable function.

```{r}
covid_most_cumulative_table <- flextable(covid_most_cumulative) %>%
  add_footer_lines("Top 5 counties in Colorado with the most cumulative COVID cases on 2022-02-01") %>%
  set_caption("Table 1: Most cumulative COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all") 

covid_most_cumulative_table
```

Here is the code I used to generate a table showing the top 5 counties with the most new cases

```{r}
covid_new_cases <- colorado_data %>%
  filter(date == my.date) %>%
  select (county, new_cases) %>%
  arrange(desc(new_cases)) %>%
  slice_head(n = 5) 
```

Here is the code I used to generate a table of the data using flextable

```{r}
covid_new_cases_table <- flextable(covid_new_cases) %>%
  add_footer_lines("Top 5 counties in Colorado with the most new cases on 2022-02-01") %>%
  set_caption("Table 2: Most new COVID cases") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all")
covid_new_cases_table

```

**Question 3: Normalizing Data** I used the code to complete the following tasks:

I used the following code to read the population data

```{r}
pop_url <- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'
```

First, I renamed the "fips" column "FIP" in the covid data

```{r}
colorado_covid_temp <- colorado_covid %>%
  rename(FIP = fips)
colorado_covid_temp
```

Then, I loaded the population data

```{r}
population_data = read_csv('https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv')
```

I used the following code to: - Converted the STATE numeric into a character forced to 2 digits with a leading 0 (when needed) - Converted the COUNTY numeric into a character forced to 3 digits with leading 0’s (when needed) - Created a FIP variable the STATE numeric into a character forced to 2 digits with a leading 0 (when needed)

```{r}
#Converted STATE numeric and COUNTY numberic into characters
population_data$STATE_FIP <- sprintf("%02s", population_data$STATE)
population_data$COUNTY_FIP <- sprintf("%03s", population_data$COUNTY)

#created a FIP variable
population_data$FIP <- paste0(population_data$STATE_FIP, population_data$COUNTY_FIP)
```

Here is the code I used to select only columns that contain "NAME" or "2021" and remove counties with FIP code "000"

```{r}
population_data_2021 <- population_data_filtered %>%
  filter(COUNTY_FIP !="000", STNAME == my.state) %>%
   select(contains("NAME") | contains("2021"), FIP)
```

The dataframe "population_data_2021" has 49,463 rows and 19 columns. It has the same counties and states as the data covid frame but is the columns are named differently. It has data for total births and deaths separated into different categories. 

Here is the code I used to find the range of populations in Colorado counties in 2021. The range was between 741 and 737287 people

```{r}
range(population_data_2021$POPESTIMATE2021)
```

Here, I filtered the covid data to only contain the data for 2021.

```{r}
colorado_covid_2021 <- colorado_covid_temp %>%
  filter(date == my.date) %>%     
  select(everything())  
  
```

Here, joined colorado_covid_2021 and poulation_data_2021

```{r}
per_capita_2021 <- colorado_covid_2021 %>%
  left_join(population_data_2021, by = "FIP")
```

Here, I calculated per capita cumulative cases, per capita new cases, and per capita new deaths

```{r}
per_capita_2021 <- per_capita_2021 %>%
  mutate(
    per_capita_cumulative_cases = cases / POPESTIMATE2021,  
    per_capita_new_cases = new_cases / POPESTIMATE2021,               per_capita_new_deaths = new_deaths / POPESTIMATE2021)    
```

However, it looks like there are a lot of duplicates, so here is the code I used to clean up the dataset.

```{r}
per_capita_2021_clean <- per_capita_2021 %>%
  distinct()  
```

Here is the code I used calculate the total per capita new cases and total per capita new cases, and per capita cumulative cases per county

```{r}
per_capita_county_summary <- per_capita_2021_clean %>%
  group_by(county) %>%  
  summarize(
    total_cumulative_cases_per_capita = sum(per_capita_cumulative_cases, na.rm = TRUE),  
    total_new_cases_per_capita = sum(per_capita_new_cases, na.rm = TRUE),    
    total_new_deaths_per_capita = sum(per_capita_new_deaths, na.rm = TRUE))
```

Here is the code I used to generate a table with the most cumulative cases per capita

```{r}
per_capita_county_summary_table <- per_capita_county_summary %>%
  select (county, total_cumulative_cases_per_capita) %>%
  arrange(desc(total_cumulative_cases_per_capita)) %>%
  slice_head(n = 5) 

per_capita_county_summary_table <- flextable(per_capita_county_summary_table) %>%
  add_footer_lines("Top 5 counties in Colorado with the most cumulative cases per capita on 2022-02-01") %>%
  set_caption("Table 3: cumulative cases per capita") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all")
per_capita_county_summary_table
```

Here is the code I used to create a table of the top five counties in colorado with the most new cases in 2021

```{r}
per_capita_county_new_cases <- per_capita_county_summary %>%
  select (county, total_new_cases_per_capita) %>%
  arrange(desc(total_new_cases_per_capita)) %>%
  slice_head(n = 5) 

per_capita_county_new_cases <-  flextable(per_capita_county_new_cases) %>%
  add_footer_lines("Top 5 counties in Colorado with the most new cases per capita on 2022-02-01") %>%
  set_caption("Table 3: new cases per capita") %>%
  set_table_properties(layout = "autofit", width = 0.5) %>%
  align(align = "center", part = "all")
per_capita_county_new_cases
```

**Question 4: Rolling Thresholds**

Here is the code I used to do the following:

-   filtered the COVID/population data to only include the last 14 days

-   determined the total number of new cases in the last 14 days per 100,000 people

-   printed a table of the top 5 counties

```{r}
max_date <- max(population_covid$date)
last_14_days <- population_covid %>%
  filter(date == max_date - 14)

last_14_days_summary <- last_14_days %>%
  group_by(county) %>%
  summarize(
    total_new_cases = sum(new_cases, na.rm = TRUE),  
    cases_per_100k = (total_new_cases / POPESTIMATE2022) * 100000
  ) %>%
  arrange(desc(cases_per_100k))  

top_5_counties <- head(last_14_days_summary, 5)
print(top_5_counties)
```

Here is how I reported the number that meets the watchlist condition: “More than 100 new cases per 100,000 residents over the past 14 days…”

```{r}
watch_list_counties <- last_14_days_summary %>%
  filter(cases_per_100k > 100)
cat("Number of counties on the watch list: ", nrow(watch_list_counties), "\n")
```

The number of counties on the watch list was reported as 2

**Question 5**

I could not figure out how to answer the question.

**Question 6**

Here is the code I used to 1. filter the data to the four states of interest and and calculate the number of daily new cases and the 7-day rolling mean 2. Make a facet plot of the data.

```{r}
covid_all_states <- data %>%
    arrange(county, date) %>%
    group_by(county) %>%
    mutate(
        new_cases = cases - lag(cases, default = 0),  
        new_deaths = deaths - lag(deaths, default = 0)  
     ) %>%
     ungroup()

state_data <- covid_all_states %>%
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) %>%
  group_by(state, date) %>%
  summarise(new_cases = sum(new_cases)) %>%
  mutate(rolling_avg = zoo::rollmean(new_cases, 7, fill = NA, align = "right"))

ggplot(state_data, aes(x = date, y = new_cases, color = state)) +
  geom_line() +
  facet_wrap(~ state, scales = "free") +
  labs(title = "Daily New COVID-19 Cases by State")

```

I could not figure out the last part of this question.

**Question 7**

Here is the code I used to calculate the Weighted Mean Center of the COVID-19 outbreak in the USA. I am not sure why the points are not on the map. I tried to filter it to just the longitude and latitude of the USA but I could not get that to work.

```{r}
county_centroids <- read_csv('https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv')

data_temp <- data %>%
  mutate(month = format(as.Date(date), "%m"))

county_centroids_joined <- data_temp %>%
  left_join(county_centroids, by = "fips")

weighted_mean_center <- county_centroids_joined %>%
  group_by(date) %>%
  summarise(
    total_cases = sum(cases, na.rm = TRUE),
    weighted_LON = sum(LON * cases, na.rm = TRUE) / total_cases,
    weighted_LAT = sum(LAT * cases, na.rm = TRUE) / total_cases
  )

ggplot(weighted_mean_center, aes(x = weighted_LON, y = weighted_LAT, color = factor(format(as.Date(date), "%m")), size = total_cases)) +
  geom_point(alpha = 0.7) +
  borders("state", fill = "gray90", colour = "white") +
  scale_color_viridis_d() +
  labs(title = "Weighted Mean Center of COVID in the USA",
       x = "Longitude", y = "Latitude",
       color = "Month", size = "Total Cases",
       caption = "Source: County-level COVID-19 Data and Centroids") +
  theme_minimal() +
  theme(legend.position = "bottom")


```
